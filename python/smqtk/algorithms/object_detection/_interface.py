import abc

import six

from smqtk.algorithms import SmqtkAlgorithm
from smqtk.utils import ContentTypeValidator

from ._defaults import DFLT_CLASSIFIER_FACTORY, DFLT_DETECTION_FACTORY


@six.add_metaclass(abc.ABCMeta)
class ObjectDetector (SmqtkAlgorithm, ContentTypeValidator):
    """
    Abstract interface to an object detection algorithm.

    An object detection algorithm is one that can take in data and output zero
    or more detection elements, where each detection represents a spatial region
    in the data.

    This high level interface only requires detection element returns (spatial
    bounding-boxes with associated classification elements).
    """

    @abc.abstractmethod
    def detect_objects(self, data_element,
                       de_factory=DFLT_DETECTION_FACTORY,
                       ce_factory=DFLT_CLASSIFIER_FACTORY):
        """
        Detect objects in the given data.

        UUIDs of detections are based on the hash produces from the combination
        of:
            - Detection bounding-box bounding coordinates
            - Classification label set predicted for a bounding box.

        :param smqtk.representation.DataElement data_element:
            Source data from which to detect objects within.
        :param smqtk.representation.DetectionElementFactory de_factory:
            Factory for generating DetectionElement instances. The default
            factory yields MemoryClassificationElement instances.
        :param smqtk.representation.ClassificationElementFactory ce_factory:
            Factory for generating ClassificationElement instances for
            detections. The default factory yields MemoryClassificationElement
            instances.

        :return: Iterator over result DetectionElement instances as generated
            by the given DetectionElementFactory, containing classification
            elements as generated by the given ClassificationElementFactory.
        :rtype: collections.Iterable[smqtk.representation.DetectionElement]

        """
